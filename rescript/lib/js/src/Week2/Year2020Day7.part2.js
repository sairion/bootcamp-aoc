// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var nil = [
  "nil",
  0
];

var cmpEq = Caml_obj.caml_equal;

var input = Fs.readFileSync("input/Week2/Year2020Day7.test.txt", "utf8").split("\n");

function appendToDict(li, k, el) {
  var entry = Belt_List.getAssoc(li, k, cmpEq);
  var next = entry !== undefined ? Belt_List.add(entry, [
          k,
          el
        ]) : ({
        hd: [
          k,
          el
        ],
        tl: /* [] */0
      });
  return Belt_List.setAssoc(li, k, next, cmpEq);
}

function parseNodes(line) {
  if (line === "no other bags") {
    return [nil];
  } else {
    return Belt_Array.keepMap(Belt_Array.keep(line.replace(/[.,]/g, "").replace(/ ?bags?/g, "bag").replace(/bag\w?/g, "\n").split("\n"), (function (a) {
                      return a !== "";
                    })), (function (a) {
                  var matched = a.match(/(\d+) (.*)/);
                  if (matched === null) {
                    return ;
                  }
                  if (matched.length !== 3) {
                    return ;
                  }
                  var num = matched[1];
                  var color = matched[2];
                  return Belt_Option.flatMap(Belt_Int.fromString(num), (function (n) {
                                return [
                                        color,
                                        n
                                      ];
                              }));
                }));
  }
}

function matchNodes(line) {
  var matched = line.match(/(.*) bags contain (.*).$/);
  return Belt_Option.flatMap(matched === null ? undefined : Caml_option.some(matched), (function (matchObj) {
                if (matchObj.length !== 3) {
                  return ;
                }
                var dest = matchObj[1];
                var nodeStr = matchObj[2];
                return [
                        dest,
                        nodeStr
                      ];
              }));
}

function makeGraph(graph, param) {
  var children = Belt_List.fromArray(parseNodes(param[1]));
  var innerGraph = Belt_List.reduce(children, /* [] */0, (function (g, param) {
          var color = param[0];
          if (color === "nil") {
            return g;
          } else {
            return appendToDict(g, color, param[1]);
          }
        }));
  return Belt_List.setAssoc(Belt_List.concat(Belt_List.concat(graph, innerGraph), innerGraph), param[0], children, cmpEq);
}

function traverse(graph, node) {
  var children = Belt_List.getAssoc(graph, node, cmpEq);
  if (children !== undefined) {
    return Belt_List.reduce(children, 1, (function (cnt, param) {
                  return cnt + Math.imul(param[1], traverse(graph, param[0])) | 0;
                }));
  } else {
    return 1;
  }
}

console.log(traverse(Belt_Array.reduce(Belt_Array.keepMap(input, matchNodes), /* [] */0, makeGraph), "shiny gold") - 1 | 0);

exports.nil = nil;
exports.cmpEq = cmpEq;
exports.input = input;
exports.appendToDict = appendToDict;
exports.parseNodes = parseNodes;
exports.matchNodes = matchNodes;
exports.makeGraph = makeGraph;
exports.traverse = traverse;
/* input Not a pure module */
