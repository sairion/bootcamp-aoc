// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("rescript/lib/js/curry.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync("input/Week2/Year2020Day4.test.txt", "utf8").split("\n\n");

function split(line) {
  var chunks = line.replace(/\n/g, " ").split(" ");
  return Belt_List.fromArray(Belt_Array.keepMap(Belt_Array.map(chunks, (function (c) {
                        return c.split(":");
                      })), (function (arr) {
                    if (arr.length !== 2) {
                      return ;
                    }
                    var key = arr[0];
                    var value = arr[1];
                    return [
                            key,
                            value
                          ];
                  })));
}

function parseHexColor(str) {
  if (/^#([0-9A-F]{6})$/i.test(str)) {
    return str;
  }
  
}

function parsePid(str) {
  return Caml_option.some(str);
}

function between(number, comp1, comp2) {
  var ok = Caml_obj.caml_lessequal(comp1, number) && Caml_obj.caml_lessequal(number, comp2);
  if (ok) {
    return Caml_option.some(number);
  }
  
}

function parseNumberBetween(str, a, b) {
  return Belt_Option.flatMap(Belt_Int.fromString(str), (function (__x) {
                return between(__x, a, b);
              }));
}

function parseHeight(str) {
  var endPos = str.length;
  var unit = str.substring(endPos - 2 | 0, endPos);
  var num = Belt_Int.fromString(str.substring(0, endPos - 2 | 0));
  return Belt_Option.flatMap(num, (function (n) {
                switch (unit) {
                  case "cm" :
                      return Belt_Option.flatMap(between(n, 150, 193), (function (value) {
                                    return {
                                            TAG: /* Cm */0,
                                            _0: value
                                          };
                                  }));
                  case "in" :
                      return Belt_Option.flatMap(between(n, 59, 76), (function (value) {
                                    return {
                                            TAG: /* Inch */1,
                                            _0: value
                                          };
                                  }));
                  default:
                    return ;
                }
              }));
}

function parseEyeColor(str) {
  switch (str) {
    case "amb" :
    case "blu" :
    case "brn" :
    case "grn" :
    case "gry" :
    case "hzl" :
    case "oth" :
        return str;
    default:
      return ;
  }
}

function resolve(param, parseFn, updateFn) {
  var str = param[1];
  return Belt_Option.flatMap(param[0], (function (r) {
                return Belt_Option.flatMap(Curry._1(parseFn, str), (function (v) {
                              return Curry._2(updateFn, r, v);
                            }));
              }));
}

var parseAndUpdateRcd_0 = [
  "byr",
  (function (rcd, str) {
      return resolve([
                  rcd,
                  str
                ], (function (__x) {
                    return parseNumberBetween(__x, 1920, 2002);
                  }), (function (r, v) {
                    return {
                            byr: v,
                            iyr: r.iyr,
                            eyr: r.eyr,
                            hgt: r.hgt,
                            hcl: r.hcl,
                            ecl: r.ecl,
                            pid: r.pid,
                            cid: r.cid
                          };
                  }));
    })
];

var parseAndUpdateRcd_1 = {
  hd: [
    "iyr",
    (function (rcd, str) {
        return resolve([
                    rcd,
                    str
                  ], (function (__x) {
                      return parseNumberBetween(__x, 2010, 2020);
                    }), (function (r, v) {
                      return {
                              byr: r.byr,
                              iyr: v,
                              eyr: r.eyr,
                              hgt: r.hgt,
                              hcl: r.hcl,
                              ecl: r.ecl,
                              pid: r.pid,
                              cid: r.cid
                            };
                    }));
      })
  ],
  tl: {
    hd: [
      "eyr",
      (function (rcd, str) {
          return resolve([
                      rcd,
                      str
                    ], (function (__x) {
                        return parseNumberBetween(__x, 2020, 2030);
                      }), (function (r, v) {
                        return {
                                byr: r.byr,
                                iyr: r.iyr,
                                eyr: v,
                                hgt: r.hgt,
                                hcl: r.hcl,
                                ecl: r.ecl,
                                pid: r.pid,
                                cid: r.cid
                              };
                      }));
        })
    ],
    tl: {
      hd: [
        "hgt",
        (function (rcd, str) {
            return resolve([
                        rcd,
                        str
                      ], parseHeight, (function (r, v) {
                          return {
                                  byr: r.byr,
                                  iyr: r.iyr,
                                  eyr: r.eyr,
                                  hgt: v,
                                  hcl: r.hcl,
                                  ecl: r.ecl,
                                  pid: r.pid,
                                  cid: r.cid
                                };
                        }));
          })
      ],
      tl: {
        hd: [
          "hcl",
          (function (rcd, str) {
              return resolve([
                          rcd,
                          str
                        ], parseHexColor, (function (r, v) {
                            return {
                                    byr: r.byr,
                                    iyr: r.iyr,
                                    eyr: r.eyr,
                                    hgt: r.hgt,
                                    hcl: v,
                                    ecl: r.ecl,
                                    pid: r.pid,
                                    cid: r.cid
                                  };
                          }));
            })
        ],
        tl: {
          hd: [
            "ecl",
            (function (rcd, str) {
                return resolve([
                            rcd,
                            str
                          ], parseEyeColor, (function (r, v) {
                              return {
                                      byr: r.byr,
                                      iyr: r.iyr,
                                      eyr: r.eyr,
                                      hgt: r.hgt,
                                      hcl: r.hcl,
                                      ecl: v,
                                      pid: r.pid,
                                      cid: r.cid
                                    };
                            }));
              })
          ],
          tl: {
            hd: [
              "pid",
              (function (rcd, str) {
                  return resolve([
                              rcd,
                              str
                            ], parsePid, (function (r, v) {
                                return {
                                        byr: r.byr,
                                        iyr: r.iyr,
                                        eyr: r.eyr,
                                        hgt: r.hgt,
                                        hcl: r.hcl,
                                        ecl: r.ecl,
                                        pid: v,
                                        cid: r.cid
                                      };
                              }));
                })
            ],
            tl: {
              hd: [
                "cid",
                (function (rcd, str) {
                    return resolve([
                                rcd,
                                str
                              ], (function (str) {
                                  return str;
                                }), (function (r, v) {
                                  return {
                                          byr: r.byr,
                                          iyr: r.iyr,
                                          eyr: r.eyr,
                                          hgt: r.hgt,
                                          hcl: r.hcl,
                                          ecl: r.ecl,
                                          pid: r.pid,
                                          cid: v
                                        };
                                }));
                  })
              ],
              tl: /* [] */0
            }
          }
        }
      }
    }
  }
};

var parseAndUpdateRcd = {
  hd: parseAndUpdateRcd_0,
  tl: parseAndUpdateRcd_1
};

function parse(fields) {
  return Belt_List.reduce(fields, {
              byr: 0,
              iyr: 0,
              eyr: 0,
              hgt: {
                TAG: /* Cm */0,
                _0: 0
              },
              hcl: "",
              ecl: "",
              pid: "",
              cid: ""
            }, (function (rcd, param) {
                var fn = Belt_List.getAssoc(parseAndUpdateRcd, param[0], (function (a, b) {
                        return a === b;
                      }));
                if (fn !== undefined) {
                  return Curry._2(fn, rcd, param[1]);
                } else {
                  return rcd;
                }
              }));
}

console.log(Belt_Array.keepMap(Belt_Array.map(input, split), parse).length);

exports.input = input;
exports.split = split;
exports.parseHexColor = parseHexColor;
exports.parsePid = parsePid;
exports.between = between;
exports.parseNumberBetween = parseNumberBetween;
exports.parseHeight = parseHeight;
exports.parseEyeColor = parseEyeColor;
exports.resolve = resolve;
exports.parseAndUpdateRcd = parseAndUpdateRcd;
exports.parse = parse;
/* input Not a pure module */
