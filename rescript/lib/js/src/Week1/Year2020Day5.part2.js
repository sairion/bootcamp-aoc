// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("rescript/lib/js/belt_List.js");

var input = Belt_List.fromArray(Fs.readFileSync("input/Week1/Year2020Day5.test.txt", "utf8").split("\n"));

function binaryToDecimal(binaryString) {
  return Number("0b" + binaryString);
}

function replaceChars(str) {
  return str.replace(/[FL]/g, "0").replace(/[BR]/g, "1");
}

function splitPosition(chars) {
  return [
          chars.substring(0, 7),
          chars.substring(7, 10)
        ];
}

function calculateId(param) {
  return Number("0b" + param[0]) * 8 + Number("0b" + param[1]) | 0;
}

var sorted = Belt_List.sort(Belt_List.map(Belt_List.map(Belt_List.map(input, replaceChars), splitPosition), calculateId), (function (a, b) {
        return a - b | 0;
      }));

var initial = Belt_List.getExn(sorted, 0);

var match = Belt_List.reduce(sorted, [
      0,
      0
    ], (function (param, id) {
        var foundId = param[1];
        var prevId = param[0];
        if (foundId === 0) {
          if (prevId === 0 || (prevId + 1 | 0) === id) {
            return [
                    id,
                    0
                  ];
          } else {
            return [
                    id,
                    prevId + 1 | 0
                  ];
          }
        } else {
          return [
                  prevId,
                  foundId
                ];
        }
      }));

var foundId = match[1];

console.log(foundId);

var sorted2 = Belt_List.tailExn(sorted);

var match$1 = Belt_List.getExn(Belt_List.keep(Belt_List.zip(sorted, sorted2), (function (param) {
            return (param[1] - param[0] | 0) > 1;
          })), 0);

var before = match$1[0];

console.log(before + 1 | 0);

exports.input = input;
exports.binaryToDecimal = binaryToDecimal;
exports.replaceChars = replaceChars;
exports.splitPosition = splitPosition;
exports.calculateId = calculateId;
exports.sorted = sorted;
exports.initial = initial;
exports.foundId = foundId;
exports.sorted2 = sorted2;
exports.before = before;
/* input Not a pure module */
